// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Men
  Female
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  password         String
  name             String
  address          String
  interests        String[]          @default(["Hiking", "Kayaking", "Fishing", "Climbing", "Hiking", "Others"])
  imagesProfile    String
  gender           Gender
  bio              String
  phoneNumber      String
  dateOfBirth      DateTime          @db.Date
  createdAt        DateTime          @default(now())
  posts            CampingPost[]     @relation("UserPosts")
  joinCampingPosts JoinCampingPost[] @relation("UserJoinCampingPosts")
  experiences      ExperiencesTips[] @relation("UserExperiences")
  likes            Like[]            @relation("UserLikes")
  comments         Comments[]        @relation("UserComments")
  shares           Share[]           @relation("UserShares")

  sentInvitations     Invitation[] @relation("SentInvitations")
  receivedInvitations Invitation[] @relation("ReceivedInvitations")        

  sentMessages         ChatMessage[] @relation("SentMessages")
  receivedMessages     ChatMessage[] @relation("ReceivedMessages")
  conversations       Conversation[] @relation("ConversationParticipants")

   products          Product[]         @relation("UserProducts")
}

model CampingPost {
  id               Int               @id @default(autoincrement())
  user             User              @relation("UserPosts", fields: [organizerId], references: [id], onDelete: Cascade)
  title            String
  description      String
  location         String
  startDate        DateTime
  endDate          DateTime
  equipment        String[]          @default([])
  places           Int
  ageCategory      AgeCategory
  images           String[]          @default([])
  organizerId      Int
  joinCampingPosts JoinCampingPost[] @relation("CampingPostJoinCampingPosts")
  category         CategoryCamping
  status           StatusCampingPost
}

enum AgeCategory {
  ADULT
  TEEN
  KIDS
}

enum StatusCampingPost {
  PENDING
  InProgress
  Completed
  Canceled
  Delegated
}

model JoinCampingPost {
  userId       Int
  postId       Int
  user         User          @relation("UserJoinCampingPosts", fields: [userId], references: [id])
  post         CampingPost   @relation("CampingPostJoinCampingPosts", fields: [postId], references: [id])
  rating       Int
  reviews      String
  favorite     String
  notification String
  status       JoiningStatus

  @@id([userId, postId])
}

enum JoiningStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum CategoryCamping {
  Hiking
  Kayaking
  Fishing
  Climbing
  Hitchhiking
}

model ExperiencesTips {
  id             Int                 @id @default(autoincrement())
  title          String
  content        String
  imagesUrl      String[]
  location       String
  category       CategoryExperiences
  filterCategory FiltreCategory
  likeCounter    Int
  shareCounter   Int
  user           User                @relation("UserExperiences", fields: [userId], references: [id], onDelete: Cascade)
  userId         Int
  createdAt      DateTime            @default(now())
  likes          Like[]              @relation("LikeExperiences")
  comments       Comments[]          @relation("CommentsExperiences")
  shares         Share[]             @relation("ShareExperiences")
}

enum CategoryExperiences {
  Experiences
  Tips
}

enum FiltreCategory {
  ShelterAndSleeping
  CookingAndEating
  ClothingAndFootwear
  NavigationAndSafety
  PersonalItemsAndComfort
  Miscellaneous
  OptionalButUseful
}

model Like {
  id           Int             @id @default(autoincrement())
  experience   ExperiencesTips @relation("LikeExperiences", fields: [experienceId], references: [id], onDelete: Cascade)
  experienceId Int
  user         User            @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
}

model Comments {
  id           Int             @id @default(autoincrement())
  content      String
  experience   ExperiencesTips @relation("CommentsExperiences", fields: [experienceId], references: [id], onDelete: Cascade)
  experienceId Int
  user         User            @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
}

model Share {
  id           Int             @id @default(autoincrement())
  experience   ExperiencesTips @relation("ShareExperiences", fields: [experienceId], references: [id], onDelete: Cascade)
  experienceId Int
  user         User            @relation("UserShares", fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
}

model Admin {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  name     String
}

model Invitation {
  id         Int              @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     StatusInvitation
  createdAt  DateTime         @default(now())

  sender   User @relation("SentInvitations", fields: [senderId], references: [id])
  receiver User @relation("ReceivedInvitations", fields: [receiverId], references: [id])
}

enum StatusInvitation {
  Pending
  Accepted
  Declined
}

model ChatMessage {
  id           Int         @id @default(autoincrement())
  sender       User        @relation("SentMessages", fields: [senderId], references: [id])
  senderId     Int
  receiver     User        @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId   Int
  content      String
  createdAt    DateTime    @default(now())
  conversation Conversation? @relation(fields: [conversationId], references: [id])
  conversationId Int?
}


model Conversation {
  id        Int         @id @default(autoincrement())
  participants User[]   @relation("ConversationParticipants")
  messages  ChatMessage[]
  createdAt DateTime    @default(now())
}



model Product {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  price       Float
  category    ProductCategory
  imageUrl    String[]
  user        User      @relation("UserProducts", fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}



enum ProductCategory {
  hikingEquipment
  clothing
  cookingSupplies
  safetyItems
  personalCareEssentials
}